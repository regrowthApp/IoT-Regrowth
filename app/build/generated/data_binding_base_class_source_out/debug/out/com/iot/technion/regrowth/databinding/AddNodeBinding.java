// Generated by view binder compiler. Do not edit!
package com.iot.technion.regrowth.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.Spinner;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.iot.technion.regrowth.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class AddNodeBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final EditText batteryPercentage;

  @NonNull
  public final EditText batteryTension;

  @NonNull
  public final Spinner nodeConnection;

  @NonNull
  public final EditText nodeId;

  private AddNodeBinding(@NonNull ConstraintLayout rootView, @NonNull EditText batteryPercentage,
      @NonNull EditText batteryTension, @NonNull Spinner nodeConnection, @NonNull EditText nodeId) {
    this.rootView = rootView;
    this.batteryPercentage = batteryPercentage;
    this.batteryTension = batteryTension;
    this.nodeConnection = nodeConnection;
    this.nodeId = nodeId;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static AddNodeBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static AddNodeBinding inflate(@NonNull LayoutInflater inflater, @Nullable ViewGroup parent,
      boolean attachToParent) {
    View root = inflater.inflate(R.layout.add_node, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static AddNodeBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.battery_percentage;
      EditText batteryPercentage = ViewBindings.findChildViewById(rootView, id);
      if (batteryPercentage == null) {
        break missingId;
      }

      id = R.id.battery_tension;
      EditText batteryTension = ViewBindings.findChildViewById(rootView, id);
      if (batteryTension == null) {
        break missingId;
      }

      id = R.id.node_connection;
      Spinner nodeConnection = ViewBindings.findChildViewById(rootView, id);
      if (nodeConnection == null) {
        break missingId;
      }

      id = R.id.node_id;
      EditText nodeId = ViewBindings.findChildViewById(rootView, id);
      if (nodeId == null) {
        break missingId;
      }

      return new AddNodeBinding((ConstraintLayout) rootView, batteryPercentage, batteryTension,
          nodeConnection, nodeId);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
